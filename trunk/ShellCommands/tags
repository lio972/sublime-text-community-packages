!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AsyncCommand	.\async_shell.py	/^class AsyncCommand(sublimeplugin.TextCommand):$/;"	c
AsyncTest	.\async.py	/^class AsyncTest(unittest.TestCase):$/;"	c
PeekNamedPipe	.\async.py	/^    def PeekNamedPipe(handle, desired_bytes):$/;"	f	function:geterror
Popen	.\async.py	/^class Popen(subprocess.Popen):$/;"	c
ReadFile	.\async.py	/^    def ReadFile(handle, desired_bytes, ol = None):$/;"	f	function:geterror
WriteFile	.\async.py	/^    def WriteFile(handle, data, ol = None):$/;"	f	function:geterror
_close	.\async.py	/^    def _close(self, which):$/;"	m	class:Popen
_example	.\async.py	/^def _example():$/;"	f
_recv	.\async.py	/^        def _recv(self, which, maxsize):$/;"	f	function:Popen._close
addSublimePackage2SysPath	.\absoluteSublimePath.py	/^def addSublimePackage2SysPath(packageName='', module=''):$/;"	f
check	.\async_shell.py	/^    def check(self, view, args):$/;"	f	function:ensure_shell
do	.\async_shell.py	/^        def do():$/;"	f	function:ensure_shell/check
ensure_shell	.\async_shell.py	/^def ensure_shell(f):$/;"	f
get_conn_maxsize	.\async.py	/^    def get_conn_maxsize(self, which, maxsize):$/;"	m	class:Popen
geterror	.\async.py	/^def geterror ():$/;"	f
kill	.\async.py	/^        def kill(self):$/;"	f	function:Popen._close
proc_in_time_or_kill	.\async.py	/^def proc_in_time_or_kill(cmd, time_out, wd = None, env = None):$/;"	f
read_async	.\async.py	/^    def read_async(self,  wait=.1, e=1, tr=5, stderr=0):$/;"	m	class:Popen
recv	.\async.py	/^    def recv(self, maxsize=None):$/;"	m	class:Popen
recv_err	.\async.py	/^    def recv_err(self, maxsize=None):$/;"	m	class:Popen
run	.\async_shell.py	/^    def run(self, view, args, shell):$/;"	m	class:AsyncCommand
send	.\async.py	/^        def send(self, input):$/;"	f	function:Popen._close
send_all	.\async.py	/^    def send_all(self, data):$/;"	m	class:Popen
send_recv	.\async.py	/^    def send_recv(self, input='', maxsize=None):$/;"	m	class:Popen
test_proc_in_time_or_kill	.\async.py	/^    def test_proc_in_time_or_kill(self):$/;"	m	class:AsyncTest
